

{% extends '../layout.swig' %}
{% block body %}
<style>
nav.navbar {
  display: none;
}
</style>
<link type="text/css" href='/css/webhooks.css' rel='stylesheet'/>
<div class="container" id="app">
  <h1>Initialize resources for an application</h1>
  <hr/>
  <ul class="nav nav-pills">

    <li class="active"><a data-toggle="pill" class="text-danger" href="#gitlab">Git</a></li>
    <li><a data-toggle="pill" href="#nginx" class="text-danger">Nginx Vhost</a></li>
    <li><a data-toggle="pill" href="#mobile" class="text-danger">Mobile app</a></li>
    <li><a data-toggle="pill" href="#jenkins" class="text-danger">Jenkins</a></li>
    <li><a data-toggle="pill" href="#mongodb" class="text-danger">Mongodb</a></li>
    <li><a data-toggle="pill" href="#mysql" class="text-danger">MySQL</a></li>
    <li class="disable diabled"><a data-toggle="pill" class="disabled text-default" href="#postgres">PostGreSql (TODO)</a></li>
    <li><a data-toggle="pill" href="#crawler" class="text-danger">Crawler</a></li>
    <li><a data-toggle="pill" href="#all" class="text-danger">All</a></li>
  </ul>

  <div class="tab-content">
    <div id="all" class="tab-pane fade">
      <h3>ALL IN ONE INIT</h3>


      <div class="form-group">
        <label for="exampleInputEmail1">Applicaton name <span class="text-danger">*</span></label>
        <input type="text" class="form-control" v-model="gitlab.repoName" aria-describedby="emailHelp" placeholder="Enter repo name">
        <small id="emailHelp" class="form-text text-muted">my-app-front </small>
      </div>
      <hr/>

      <h4>Jenkins</h4>

      <div class="form-group">
        <label for="jenkins-job">Create Jenkins jobs and hooks</label>
        <input type="checkbox" class="" id="jenkins-job" name="jenkins-job" v-model="jenkins.ci" value="true"/>
      </div>

      <div  v-if="jenkins.ci">
        <h4 for="">Create Jenkins job for the following branches </h4>
        <div class="col-md-4 form-group"><label for="branch-wip">Wip</label> <input type="checkbox" class="" name="branch-wip" v-model="jenkins.ciWip" value="true" checked/> </div>
        <div class="col-md-4 form-group"><label for="branch-develop">Develop</label> <input type="checkbox" class="" name="branch-develop" v-model="jenkins.ciDevelop" value="true" checked /> </div>
        <div class="col-md-4 form-group"><label for="branch-staging">Staging</label> <input type="checkbox" class="" name="branch-staging" v-model="jenkins.ciStaging" value="false"/> </div>
      </div>

      <div class="form-group" v-if="jenkins.ci">
        <label for="exampleFormControlSelect1">Jenkins Type</label>
        <select class="form-control" id="exampleFormControlSelect1" v-model="jenkins.type">
          <option></option>
          <option>php</option>
          <option>angular</option>
          <option>node</option>
          <option>ionic</option>
          <option>cordova</option>
          <option>react-native</option>
          <option>front</option>
        </select>
      </div>

      <hr/>
      <h4>Nginx</h4>

      <div class="form-group" v-if="config && config.devopsConfig">
        <label for="exampleFormControlSelect1">Target server <span class="text-danger">*</span></label>
        <select class="form-control" id="exampleFormControlSelect1" v-model="nginx.agent">
          <option v-for="(server) in config.devopsConfig.servers">[[ server ]]</option>
        </select>
      </div>

      <div class="form-group">
        <label for="exampleFormControl1">Vhost type <span class="text-danger">*</span></label>
        <select class="form-control" id="exampleFormControlSelect1" v-model="nginx.type">
        <option></option>
          <option>php</option>
          <option>html</option>
          <option>proxy</option>
          <option>node</option>
        </select>
      </div>

      <div class="form-group">
        <label for="exampleInputEmail1">Add SSL (certbot)</label>
        <input type="checkbox" class="form-control"  aria-describedby="emailHelp" placeholder="Create ssl certificate" v-model="nginx.ssl">
      </div>

      <div class="form-group" v-if="nginx.type === 'node'">
        <label for="exampleInputEmail1">Startup script for node </label>
        <input type="text" class="form-control" id="git" aria-describedby="emailHelp" placeholder="Enter git url" v-model="nginx.startupScript">
      </div>


      <div class="form-group" v-if="nginx.type === 'html' || nginx.type === 'php'">
        <label for="exampleInputEmail1">App document root </label>
        <input type="text" class="form-control"  aria-describedby="emailHelp" placeholder="Default '{projectFolder}/{appName}/dist'" v-model="nginx.appRootFolder">
      </div>


      <hr/>
      <button type="button" class="btn btn-primary btn-block" v-on:click="createAll()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create</button>



    </div>


    <!-- NGINX -->
    <div id="nginx" class="tab-pane fade">
      <h3>Nginx instance </h3>


      <div class="form-group" v-if="config && config.devopsConfig">
        <label for="exampleFormControlSelect1">Target server <span class="text-danger">*</span></label>
        <select class="form-control" id="exampleFormControlSelect1" v-model="nginx.agent">
          <option v-for="(server) in config.devopsConfig.servers">[[ server ]]</option>
        </select>
      </div>

      <div class="form-group">
        <label for="exampleInputEmail1">Name <span class="text-danger">*</span></label>
        <input type="text" class="form-control" v-model="nginx.name" aria-describedby="" placeholder="Enter app name">
        <small id="emailHelp" class="form-text text-muted">my-app.dev | my-app.staging </small>
      </div>

      <div class="form-group">
        <label for="exampleFormControlSelect1">Vhost type <span class="text-danger">*</span></label>
        <select class="form-control" id="exampleFormControlSelect1" v-model="nginx.type">
        <option></option>
          <option>php</option>
          <option value="wordpress">-- wordpress</option>
          <option value="symfony">-- symfony</option>
          <option value="silex">-- silex</option>
          <option>html</option>
          <option>proxy</option>
          <option>node</option>

        </select>
      </div>

      <div class="form-group">
        <label for="exampleInputEmail1">Add SSL (certbot)</label>
        <input type="checkbox" class="form-control"  aria-describedby="emailHelp" placeholder="" v-model="nginx.ssl">
      </div>


      <div class="form-group" v-if="nginx.type === 'node'">
        <label for="exampleInputEmail1">Startup script for node </label>
        <input type="text" class="form-control" id="git" aria-describedby="emailHelp" placeholder="Enter git url" v-model="nginx.startupScript">
      </div>

      <div class="form-group" v-if="nginx.type === 'html' || nginx.type === 'php'">
        <label for="exampleInputEmail1">App document root </label>
        <input type="text" class="form-control"  aria-describedby="emailHelp" placeholder="Default '{.projectFolder}/{appName}/dist'" v-model="nginx.appRootFolder">
      </div>

      <div class="form-group">
        <label for="exampleInputEmail1">Repository <span class="text-danger">*</span></label>
        <input type="url" class="form-control" id="git" aria-describedby="emailHelp" placeholder="Enter git url" v-model="nginx.git">
        <small id="emailHelp" class="form-text text-muted">git@gitlab.com:my-group/my-repo.gt </small>
      </div>

      <div class="form-group">
        <label for="">Branch to checkout (defaults to develop)</label>
        <input type="text" class="form-control" id="git" aria-describedby="emailHelp" placeholder="Enter git url" v-model="nginx.branch">
      </div>

      <button type="button" class="btn btn-primary btn-block" v-on:click="createNginxInstance()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create</button>
    </form>
  </div>

  <!-- GITLAB -->
  <div id="gitlab" class="tab-pane fade  in active">
    <h3>GITLAB</h3>
    <div class="form-group">
      <label for="exampleInputEmail1">Repo Name <span class="text-danger">*</span></label>
      <input type="text" class="form-control" v-model="gitlab.repoName" aria-describedby="emailHelp" placeholder="Enter repo name">
      <small id="emailHelp" class="form-text text-muted">my-app-front </small>
    </div>

    <div class="form-group">
      <label for="clientRepo">Client Repo (for imports) </label>
      <input type="checkbox" class="form-control" v-model="gitlab.importClientRepo" aria-describedby="clientRepoHelp" id="clientRepo" placeholder="Enter Client Repo">

      <ng-container v-if="gitlab.importClientRepo">
      <input type="text" class="form-control" v-model="gitlab.clientRepo" aria-describedby="clientRepoHelp" id="clientRepo" placeholder="Enter Client Repo">
      <small id="clientRepoHelp" class="form-text text-muted">https://{user}:{password}@git.com/group/project.git </small>
      </ng-container>
    </div>

    <div class="form-group">
      <label for="exampleFormControlSelect1">Create Jenkins jobs and hooks</label>
      <input type="checkbox" class="" id="exampleFormControlSelect1" v-model="jenkins.ci" value="true"/>
    </div>


    <div  v-if="jenkins.ci">
      <h4 for="">Create Jenkins job for the following branches </h4>
      <div class="col-md-4 form-group"><label for="branch-wip">Wip</label> <input type="checkbox" class="" name="branch-wip" v-model="jenkins.ciWip" value="true" checked/> </div>
      <div class="col-md-4 form-group"><label for="branch-develop">Develop</label> <input type="checkbox" class="" name="branch-develop" v-model="jenkins.ciDevelop" value="true" checked/> </div>
      <div class="col-md-4 form-group"><label for="branch-staging">Staging</label> <input type="checkbox" class="" name="branch-staging" v-model="jenkins.ciStaging" value="false" /> </div>
    </div>

    <div class="form-group">
      <label for="exampleFormControlSelect1">Jenkins Type</label>
      <select class="form-control" id="exampleFormControlSelect1" v-model="gitlab.type">
        <option></option>
        <option>php</option>
        <option>angular</option>
        <option>node</option>
        <option>front</option>
        <option>react-native</option>
        <option>ionic</option>
        <option>cordova</option>
      </select>
    </div>


    <button type="button" class="btn btn-primary btn-block" v-on:click="createRepository()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create Repo</button>
  </div>

  <!-- // JENKINS -->

  <!-- MOBILE -->

  <div id="mobile" class="tab-pane fade">
    <h3>Mobile app</h3>

    <div class="form-group">
      <label for="exampleInputEmail1">App name <span class="text-danger">*</span></label>
      <input type="text" class="form-control" v-model="mobile.name" aria-describedby="" placeholder="Enter app name">
      <small id="emailHelp" class="form-text text-muted">my-app | my-app </small>
    </div>

    <div class="form-group">
      <label for="exampleInputEmail1">App name</label>
      <input type="text" class="form-control" v-model="mobile.appName" aria-describedby="" placeholder="Enter app name">
      <small id="emailHelp" class="form-text text-muted">my-app.dev | my-app.staging </small>
    </div>


    <div class="form-group">
      <label for="exampleFormControlSelect1">Type <span class="text-danger">*</span></label>
      <select class="form-control" id="exampleFormControlSelect1" v-model="mobile.platform">
        <option>React-Native</option>
        <option>Cordova</option>
      </select>
    </div>

    <div class="form-group">
      <label for="exampleFormControlSelect1">Operating systems <span class="text-danger">*</span></label>
      <select class="form-control" id="exampleFormControlSelect1" v-model="mobile.oses" multiple>
        <option>iOS</option>
        <option>Android</option>
      </select>
    </div>


    <button type="button" class="btn btn-primary btn-block" v-on:click="createMobileApp()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create mobile app</button>
  </div>

<!-- // MOBILE -->

<!-- // MONGO -->

  <div id="mongodb" class="tab-pane fade">
    <h3>MONGO DB </h3>
    <div class="form-group">
      <label for="exampleInputEmail1">Database name <span class="text-danger">*</span></label>
      <input type="text" class="form-control" v-model="mongodb.name" aria-describedby="" placeholder="Enter app name">
      <small id="emailHelp" class="form-text text-muted">my-app.dev | my-app.staging </small>
    </div>

    <div class="form-group">
      <label for="exampleFormControlSelect1">Server <span class="text-danger">*</span></label>
      <select class="form-control" id="exampleFormControlSelect1" v-model="mongodb.options.server">
        <option>develop</option>
        <option>jabbahut</option>
      </select>
    </div>

    <div class="form-group">
      <label for="exampleInputEmail1">User</label>
      <input type="url" class="form-control"  v-model="mongodb.options.user">
      <small id="emailHelp" class="form-text text-muted">If empty i'll use the database name</small>
    </div>

    <div class="form-group">
      <label for="exampleInputEmail1">Password</label>
      <input type="url" class="form-control"  v-model="mongodb.options.password">
      <small id="emailHelp" class="form-text text-muted">If empty i'll use the database name</small>
      <button type="button" class="btn btn-default btn-xs pull-right" v-on:click="mongodb.options.password = generatePassword()">Random</button>
    </div>

    <div class="form-group">
      <label for="jenkins-job">Save to the deployment of the same name</label>
      <input type="checkbox" class="" id="jenkins-job" name="jenkins-job" v-model="mongodb.options.save" value="true"/>
    </div>

    <button type="button" class="btn btn-primary btn-block" v-on:click="createDatabaseMongo()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create</button>
  </div>

  <div id="mysql" class="tab-pane fade">
    <h3>MYSQL </h3>
    <div class="form-group">
      <label for="exampleInputEmail1">Database name <span class="text-danger">*</span></label>
      <input type="text" class="form-control" v-model="mysql.name" aria-describedby="" placeholder="Enter app name">
      <small id="emailHelp" class="form-text text-muted">my-app.dev | my-app.staging </small>
    </div>

    <div class="form-group">
      <label for="exampleFormControlSelect1">Server <span class="text-danger">*</span></label>
      <select class="form-control" id="exampleFormControlSelect1" v-model="mysql.options.server">
       <option></option>
        <option>develop</option>
        <option>jabbahut</option>
      </select>
    </div>

    <div class="form-group">
      <label for="exampleInputEmail1">User</label>
      <input type="url" class="form-control"  v-model="mysql.options.user">
      <small id="emailHelp" class="form-text text-muted">If empty i'll use the database name</small>
    </div>


    <div class="form-group">
      <label for="exampleInputEmail1">Password</label>
      <input type="url" class="form-control"  v-model="mysql.options.password">
      <small id="emailHelp" class="form-text text-muted">If empty i'll use the database name</small>
      <button type="button" class="btn btn-default btn-xs pull-right" v-on:click="mysql.options.password = generatePassword()">Random</button>
    </div>

    <div class="form-group">
      <label for="mysql-importfile">DB Backup File</label>
      <input type="file" class="form-control" id="mysql-importfile" ref="mysqlImportfile" v-on:change="handleFileUpload()">
      <small id="emailHelp" class="form-text text-muted">File to import to the created database</small>
    </div>

    <div class="form-group">
      <label for="jenkins-job">Save config to the deployment of the same name</label>
      <input type="checkbox" class="" id="jenkins-job" name="jenkins-job" v-model="mysql.options.save" value="true"/>
    </div>

    <div class="form-group" v-if="mysql.options.save">
      <label for="exampleInputEmail1">App name <span class="text-danger">*</span></label>
      <input type="text" class="form-control" v-model="mysql.options.appName" aria-describedby="" placeholder="Enter app name">
      <small id="emailHelp" class="form-text text-muted">my-app.dev | my-app.staging </small>
    </div>


    <button type="button" class="btn btn-primary btn-block" v-on:click="createDatabaseMySQL()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create</button>
  </div>

  <div id="jenkins" class="tab-pane fade">
    <h3>Jenkins jobs</h3>
   <div class="form-group">
     <label for="exampleInputEmail1">Job name <span class="text-danger">*</span></label>
     <input type="text" class="form-control"  v-model="jenkins.name">
     <small id="emailHelp" class="form-text text-muted">app-name.branch</small>
   </div>

   <div class="form-group">
     <label for="">Job Type <span class="text-danger">*</span></label>
     <select class="form-control" id="exampleFormControlSelect1" v-model="jenkins.type">
       <option></option>
       <option>php</option>
       <option>angular</option>
       <option>node</option>
       <option>front</option>
       <option>ionic</option>
       <option>react-native</option>
     </select>
   </div>

   <div class="form-group">
     <label for="exampleInputEmail1">Git repository url <span class="text-danger">*</span></label>
     <input type="text" class="form-control"  v-model="jenkins.gitUrl">
   </div>

   <div class="form-group">
     <label for="exampleInputEmail1">Git branch <span class="text-danger">*</span></label>
     <input type="text" class="form-control"  value="master" v-model="jenkins.branch">
   </div>

   <div class="form-group">
     <label for="">Custom build script</label>
       <textarea class="form-control" id="exampleFormControlSelect1" v-model="jenkins.buildScript">
       </textarea>
       <button type="button" class="btn btn-primary btn-block" v-on:click="createJenkinsJob()" :disabled="isRequesting"><i class="fa fa-spinner fa-spin" v-if="isRequesting"></i> Create job</button>
   </div>

  </div>

  <div id="crawler" class="tab-pane fade">
    <h3>Menu 2</h3>
    <p>Some content in menu 2.</p>
  </div>
</div>

<hr/>
<div class="block text-right mb-10" style="margin-bottom: 10px">
  <button class="btn btn-danger btn-xs text-right" v-on:click="clearConsole()"><i class="fa fa-times text-light"></i> </button>
</div>
<pre id="console" style="min-height: 150px">[[ consoleContent ]]</pre>
</div>


{% endblock %}
{% block javascript %}
<script>
  toastr.options.showMethod = 'slideDown';
  toastr.options.hideMethod = 'slideUp';
  toastr.options.closeMethod = 'slideUp';
  toastr.options.positionClass =  "toast-top-full-width";
  toastr.options.preventDuplicates =  true;
</script>

<script>
  (function(){
  Vue.prototype.$http = axios.create({
    baseURL: '/',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      Authorization: 'Bearer ' + localStorage.getItem('Enyo intranet_token')
    }
  });

    var app = new Vue({
      el: '#app',
      delimiters: ['[[', ']]'],
      data: {
        success: '',
        error: '',
        config: null,
        nginx: {},
        gitlab: {},
        jenkins: {ci: false, ciWip: true, ciDevelop: true, ciStaging: true},
        mobile: {},
        mongodb: {
          name: '',
          options:{
            user: '',
            password: ''
          }
        },
        mysql: {
          name: '',
          options:{
            user: '',
            password: '',
            save: true,
            appName: '',
          }
        },
        file: null,
        consoleContent: '',
        allMode: false,
        isRequesting: false
      },

    created: function(){
     // this.params.search = getUrlParameter('search');
   },

   mounted: function(){
    this.$addItemModal = $('#add-item');
    this.getSettings();
  },
  methods: {

  getSettings() {
    var that = this;
    var q = this.$http.get('/api/devops/config');
    var that = this;
    q.then((out) => {
      this.consolePrint(out.data);
      this.isRequesting = false;

      this.config = out.data.body;
      console.log(this.config);
    }).catch((err) => {
      console.log(err);
      this.isRequesting = false;
      this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
    });
    return q;
  },


    createRepository() {
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.consolePrint(`Creating repository ${JSON.stringify(this.gitlab)} ...`);
      this.isRequesting = true;
      this.gitlab.ci = this.jenkins.ci;
      var q = this.$http.post('/api/devops/gitlab', this.gitlab );
      var that = this;
      q.then((out) => {
        this.isRequesting = false;
        this.consolePrint(out.data);
        toastr.success("Repository created");
        if (this.allMode) {
          this.gitlab = {};
        }
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        toastr.error("Something happened. Repository was not created");
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err));
      });
      return q;
    },

    createNginxInstance(name, options = {}) {
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.isRequesting = true;
      this.consolePrint(`Creating NGINX vhost ${this.nginx.name} ...`);
      this.nginx = _.merge(this.nginx, options);
      var q = this.$http.post('/api/devops/nginx', {...this.nginx, name: name || this.nginx.name,
      appName: options.appName } );
      var that = this;
      q.then((out) => {
        this.consolePrint(out.data);
        this.isRequesting = false;
        toastr.success("Nginx vhost created");
        // this.gitlab = {};
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("Nginx vhost not created");
      });
      return q;
    },


    createDatabaseMongo() {
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.isRequesting = true;
      this.consolePrint(`Creating mongo DB ${this.mongodb.name} on ${this.mongodb.options.server} ...`);
      var q = this.$http.post('/api/devops/mongodb', this.mongodb );
      var that = this;
      q.then((out) => {
        this.consolePrint(out.data);
        this.isRequesting = false;
        toastr.success("mongodb database created");
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("mongodb not created");
      });
      return q;
    },

    createMobileApp() {
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.isRequesting = true;
      this.consolePrint(`Creating mobile ${this.mobile.name} on ${this.mobile.platorm} ...`);
      var q = this.$http.post('/api/devops/appcenter', this.mobile );
      var that = this;
      q.then((out) => {
        this.consolePrint(out.data);
        this.isRequesting = false;
        toastr.success("Mobile app created");
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("Mobile app not created");
      });
      return q;
    },

    createJenkinsJob() {
      io.socket.on('devops:jenkins:job:'+ this.jenkins.name, {created: false});
      console.log("req", this.jenkins);
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.isRequesting = true;
      this.consolePrint(`Creating Jenkins job ${this.jenkins.name}...`);
      var q = this.$http.post('/api/devops/jenkins', this.jenkins );
      var that = this;
      q.then((out) => {
        this.consolePrint(out.data);
        this.isRequesting = false;
        toastr.success("Jenkins job created");
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("Jenkins job not created");
      });
      return q;
    },

    createDatabaseMySQL() {
      let formData = new FormData();
      var that = this;
      this.consolePrint("\n\n");
      this.linebreakConsole();
      this.isRequesting = true;
      this.consolePrint(`Creating MySQL DB ${this.mysql.name} on ${this.mysql.options.server} ...`);

      formData.append('file', this.file);
      formData.append('name', this.mysql.name);
      formData.append('options', JSON.stringify(this.mysql.options));

      let q = this.$http.post( '/api/devops/mysql',
        formData,
        {
          headers: {
              'Content-Type': 'multipart/form-data'
          }
        }
      )
      q
      .then((out) => {
        this.consolePrint(out.data);
        this.isRequesting = false;
        toastr.success("MySQL database created");
      }).catch((err) => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("MySQL DB not created");
      });
      return q;
    },

    handleFileUpload(){
      this.file = this.$refs.mysqlImportfile.files[0];
    },

    generatePassword() {
      return  Math.random().toString(36).substring(2, 8)
      + Math.random().toString(36).substring(2, 8).toUpperCase()
      + Math.random().toString(36).substring(2, 8)
      + Math.random().toString(36).substring(2, 8).toUpperCase();
    },

    createAll(){
      this.consolePrint(`Initialising project ${this.gitlab.repoName} ...`);
      this.isRequesting = true;
      let repo;
      this.createRepository()
      .then(out => {
        repo = out.data.body.git;
        this.nginx.git = repo.ssh_url_to_repo;
        this.nginx.gitHttp = repo.http_url_to_repo;

        return  this.jenkins.ciWip ? this.createNginxInstance(repo.name + '.wip', {appName: repo.name}) : true
      })
      .then(out => {
        return  this.jenkins.ciDevelop ? this.createNginxInstance(repo.name + '.dev', {appName: repo.name}) : true
      })
      .then(out => {
        return  this.jenkins.ciStaging ? this.createNginxInstance(repo.name + '.staging', {appName: repo.name}) : true
      })
      .then(out => {
       console.log(out);
     })
      .catch(err => {
        console.log(err);
        this.isRequesting = false;
        this.consolePrint(err.response && err.response.data ? err.response.data :(err.response ? err.response : err) );
        toastr.error("Error while creating new project");
      })
    },

    consolePrint(text) {
      this.consoleContent += '\n';
      this.consoleContent += _.isString(text) ? text : JSON.stringify(text, null,  2);
    }
    ,
    linebreakConsole() {
      this.consoleContent += '\n________________________________________________________________\n';
    },

    clearConsole() {
      this.consoleContent = '';
    }

  }
});
App.vue = app;
console.log("test");


if (window.io) {
  io.socket.on('connection', function (socket) {
      var endp = socket.manager.handshaken[socket.id].address;
      console.log("query... " + socket.manager.handshaken[socket.id].query.user);
  });


  io.socket.on('new-member', function (socket) {
      console.log("New member " + socket);
  });
}
}());
</script>
{% endblock %}
